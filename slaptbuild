#!/bin/bash
##
## this package is free software and free to use
## slaptbuild application has no official relation with slackbuild.org
## this is just tool for managing slaptbuild tree and run on top of slackbuild tree
## license to GPLV3
##
## bugs report to
## author : amru.rosyada@gmail.com
## git    : https://github.com/zendbit/slaptbuild
##
## contribution are welcome, free to modified
##

set +e

# check if run as root
if [[ "$EUID" -ne 0 ]]
  then echo "Please run as root"
  exit
fi

SLACKBUILD_DIR=/usr/slackbuilds
SLAPTBUILD_DIR=/usr/slaptbuild
SLAPTBUILD_DB=$SLAPTBUILD_DIR/slackbuilds.db
SLAPTBUILD_INSTALLED_DB=$SLAPTBUILD_DIR/slackbuilds.installed.db
SLAPTBUILD_BLACKLIST_DB=$SLAPTBUILD_DIR/slackbuilds.blacklist.db

if [[ ! -d $SLAPTBUILD_DIR ]]
then
  mkdir $SLAPTBUILD_DIR
fi

if [[ ! -f $SLAPTBUILD_DB ]]
then
  touch $SLAPTBUILD_DB
fi

if [[ ! -f $SLAPTBUILD_INSTALLED_DB ]]
then
  touch $SLAPTBUILD_INSTALLED_DB
fi

if [[ ! -f $SLAPTBUILD_BLACKLIST_DB ]]
then
  touch $SLAPTBUILD_BLACKLIST_DB
fi

readarray -t slaptbuild_db_arr < $SLAPTBUILD_DB
readarray -t slaptbuild_installed_db_arr < $SLAPTBUILD_INSTALLED_DB
readarray -t slaptbuild_blacklist_db_arr < $SLAPTBUILD_BLACKLIST_DB

## get options parameter from argument
get_options()
{
  opt=""
  for p in ${@:1}
  do
    if [[ $p =~ ^\- ]]
    then
      opt="$opt $p"
    fi
  done

  echo $opt
}

## get parameter non optional from argument
get_params()
{
  param=""
  for p in ${@:1}
  do
    if [[ ! $p =~ ^\- ]]
    then
      param="$param $p"
    fi
  done

  echo $param
}

## check first parameter is in the rest of parameter
check_options()
{
  res="false"
  for p in ${@:2}
  do
    if [[ $1 = $p ]]
    then
      res="true"
      break
    fi
  done
  echo $res
}

update_sbo()
{
  if [[ ! -d $SLACKBUILD_DIR ]]
  then
    echo "## get current slackbuild tree from https://github.com/SlackBuildsOrg/slackbuilds.git..."
    cd /usr
    git clone https://github.com/SlackBuildsOrg/slackbuilds.git
    cd - &> /dev/null
    echo "## finished."
  else
    echo "## pulling current slackbuild tree from https://github.com/SlackBuildsOrg/slackbuilds.git..."
    cd $SLACKBUILD_DIR
    git pull
    cd - &> /dev/null
    echo "## finished."
  fi

  echo "## generating $SLAPTBUILD_DB..."
  rm -f $SLAPTBUILD_DB

  for catDir in $SLACKBUILD_DIR/*/*/
  do
    pkgDir=${catDir%*/}
    source "$catDir${pkgDir##*/}.info"
    echo "$pkgDir $PRGNAM $VERSION" >> $SLAPTBUILD_DB
  done
  echo "## finished."
}

search_sbo()
{
  echo "## finding package contains ${@:2}"
  
  for param in ${@:2}
  do
    while IFS=' ' read -ra line
    do
      if [[ "${line,,}" =~ .*"${param,,}".* ]]
      then
        echo ">> ${line[1]} ${line[2]} ${line[0]}"
      fi
    done < $SLAPTBUILD_DB
  done
  echo "## finished."
}

info_sbo()
{
  echo "## get package info of $1"
  pkg=`cat $SLAPTBUILD_DB|grep " $1 "`
  if [[ ! -z $pkg ]]
  then
    pkg_detail=($pkg)
    prgpath=${pkg_detail[0]}
    cat $prgpath/"slack-desc"
  else
    echo "pkg not found: $1"
  fi
  echo "## finished."
}

pkgs_base_toremove=""
is_checked_base_pkgs_deps=""

remove_sbo()
{
  pkgs_totemove=""
  pkgs_toremove_invalid=""
  pkgs_base_toremove=""
  is_checked_base_pkgs_deps=""
  
  opt=$(get_options "${@:2}")
  params=$(get_params "${@:2}")
  pkgs_base_toremove=$params
  
  # check depedencies and save it to pkgs_toremove variable
  # if -u or upgrade or reinstall dont check depedencies
  if [[ ! $(check_options "-u" $opt) = "true" ]]
  then
    echo "## checking depedencies for: $params"
    check_rempkgdeps_sbo $params
    cleanup_pkgs_toremove_sbo

    echo "## removing installed pkg(s) contains: $pkgs_toremove $pkgs_base_toremove"
    if [[ ! -z $pkgs_toremove_invalid ]]
    then
      echo "## invalid pkg(s): $pkgs_toremove_invalid"
    fi
  fi

  if [[ ! $(check_options "-y" $opt) = "true" ]]
  then
    read -p "remove pkg(s) (y/n): " confirm
    if [[ ! -z $confirm  ]] && [[ $confirm = "n" || $confirm = "N" ]]
    then
      exit
    fi
  fi

  # split to array
  pkgs=($pkgs_toremove $pkgs_base_toremove)

  if [[ ! -z $# ]] && [[ $# -ge 2 ]]
  then
    # remove old installed buffer
    rm -f $SLAPTBUILD_INSTALLED_DB.tmp
    for pkg in ${pkgs[@]}
    do
      while IFS=' ' read -ra line
      do
        prgnam=${line[0]}
        pkgnam=${line[1]}
        if [[ "$prgnam" = "$pkg" ]]
        then
          echo ">> remove package $pkg..."
          /sbin/removepkg $pkgnam
          if [[ $? -eq 0 ]]
          then
            cat $SLAPTBUILD_INSTALLED_DB|grep -v -w $pkgnam|grep -e "\S" > $SLAPTBUILD_INSTALLED_DB.tmp
            # udpate installed db
            if [[ -f $SLAPTBUILD_INSTALLED_DB.tmp ]]
            then
              cp $SLAPTBUILD_INSTALLED_DB.tmp $SLAPTBUILD_INSTALLED_DB
            fi
          fi
          echo ">> finished."
        fi
      done < $SLAPTBUILD_INSTALLED_DB
    done
  fi

  echo "## finished."
}

install_pkg()
{
  echo "## installing ${@:2}"
  for pkg in ${@:2}
  do
    if [[ -f $pkg ]]
    then
      installpkg $pkg
      if [[ $? -eq 0 ]]
      then
        pkgnam=`basename $pkg|xargs`
        prgnam=`sed 's/\-[0-9]\+\.[0-9]\+.*$//g' <<< $pkgnam|xargs`
        if [[ $? -eq 0 ]] && [[ -n $prgnam ]] && [[ -n $pkgnam ]]
        then
          echo $prgnam $pkgnam >> $SLAPTBUILD_INSTALLED_DB
        fi
      fi
    fi
  done
  echo "## finished."
}

upgrade_pkg()
{
  echo "## installing ${@:2}"
  for pkg in ${@:2}
  do
    if [[ -f $pkg ]]
    then
      remove_sbo "-u" "-y" $pkg
      installpkg $pkg
      if [[ $? -eq 0 ]]
      then
        pkgnam=`basename $pkg|xargs`
        prgnam=`sed 's/\-[0-9]\+\.[0-9]\+.*$//g' <<< $pkgnam|xargs`
        if [[ $? -eq 0 ]] && [[ -n $prgnam ]] && [[ -n $pkgnam ]]
        then
          echo $prgnam $pkgnam >> $SLAPTBUILD_INSTALLED_DB
        fi
      fi
    fi
  done
  echo "## finished."
}

install_sbo()
{
  PRINT_PACKAGE_NAME=""
  pkgs_toinstall=""
  pkgs_toinstall_invalid=""

  opt=$(get_options "${@:2}")
  params=$(get_params "${@:2}")

  # check depedencies and save it to pkgs_toinstall variable
  echo "## checking depedencies for: $params"
  check_pkgdeps_sbo $params

  echo "## install pkg(s) contains: $pkgs_toinstall"
  if [[ ! -z $pkgs_toinstall_invalid ]]
  then
    echo "## invalid pkg(s): $pkgs_toinstall_invalid"
  fi
  
  if [[ ! $(check_options "-y" $opt) = "true" ]]
  then
    read -p "install pkg(s) (y/n): " confirm
    if [[ ! -z $confirm  ]] && [[ $confirm = "n" || $confirm = "N" ]]
    then
      exit
    fi
  fi

  # split to array
  pkgs=($pkgs_toinstall)

  # install all packages with depedencies in pkgs array
  for prg in ${pkgs[@]}
  do
    pkg=`awk /" $prg "/ < $SLAPTBUILD_DB`
    if [[ ! -z $pkg ]]
    then
      pkg_detail=($pkg)
      prgpath=${pkg_detail[0]}
      prgnam=${pkg_detail[1]}
      version=${pkg_detail[2]}
      PKGVER=""
      
      cd $prgpath
      argv0="$0"
      BASH_ARGV0=$prgpath/$prgnam.SlackBuild

      # get package info
      source $prgpath/$prgnam.info

      # if package has same name and version skip it
      installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1" "$2}'|grep -w "$prgnam $prgnam-$version"|xargs)
      if [[ -n $installed ]] && [[ "$1" = "install" ]]
      then
        echo ">> $prgnam $version already installed."
        continue
      fi
  
      blacklisted=`cat $SLAPTBUILD_BLACKLIST_DB|grep -e "^${prgnam}$"|xargs`
      if [[ -n $blacklisted ]]
      then
        echo ">> skip, $prgnam blacklisted."
        continue
      fi

      # download source for build process
      # downloads=""
      #if [[ ! "${DOWNLOAD,,}" = "unsupported" ]]
      #then
      #  downloads=$DOWNLOAD
      #if [[ ! "${DOWNLOAD_x86_64,,}" = "unsupported" ]]
      #then
      #  downloads=$DOWNLOAD_x86_64
      #if [[ ! "${DOWNLOAD_i586,,}" = "unsupported" ]]
      #then
      #  downloads=$DOWNLOAD_i586
      #if [[ ! "${DOWNLOAD_i586,,}" = "unsupported" ]]
      #then
      #  downloads=$DOWNLOAD_i686
      #fi

      downloads=""
      if [[ $(uname -m) = "x86_64" ]]
      then
        downloads=$DOWNLOAD_x86_64
      elif [[ $(uname -m) = "i586" ]]
      then
        downloads=$DOWNLOAD_i586
      elif [[ $(uname -m) = "i686" ]]
      then
        downloads=$DOWNLOAD_i686
      elif [[ $(uname -m) = "arm" ]]
      then
        downloads=$DOWNLOAD_arm
      elif [[ $(uname -m) = "arm64" ]]
      then
        downloads=$DOWNLOAD_arm64
      fi

      if [[ -z $downloads ]]
      then
        downloads=$DOWNLOAD
      fi
      
      wget -P $prgpath -c -t inv $downloads

      source $prgpath/$prgnam.SlackBuild

      # check if package already generated
      pkgout=$PRGNAM-${PKGVER:-$VERSION}-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
      #if [[ -n $PKGVER ]]
      #then
      #  pkgout=$PRGNAM-$PKGVER-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
      #fi

      # pkg path
      if [[ -f $OUTPUT/$pkgout ]]
      then
        # if there are no errors
        if [[ $? -eq 0 ]] && [[ -n $pkgout ]]
        then
          # check if package already installed
          # if so do reinstall or upgrade or downgrade
          installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'|grep -w "$prgnam"|xargs)
          if [[ -n $installed ]]
          then
            remove_sbo "-u" "-y" $prgnam
          fi

          # install package if success
          /sbin/installpkg $OUTPUT/$pkgout

          ## update installed app list
          installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1 $2}'|grep -w "$prgnam $version"|grep -e "\S"|xargs)
          if [[ -z $installed ]]
          then
            echo $PRGNAM $pkgout >> $SLAPTBUILD_INSTALLED_DB
          fi

          ## remove downloaded source if success
          arr_downloads=( $downloads )
          for download in "${arr_downloads[@]}"
          do
            downloadedfile=$prgpath/${download##*/}
            if [[ -f $downloadedfile ]]
            then
              rm -f $downloadedfile
            fi
          done
        fi
      fi
      BASH_ARGV0=$argv0
      cd - &> /dev/null
    fi
  done
  echo "## finished."
}

# program to install after check depedencies
pkgs_toinstall=""
pkgs_toinstall_invalid=""

check_pkgdeps_sbo()
{
  for prg in ${@}
  do
    pkg=`awk /" $prg "/ < $SLAPTBUILD_DB`
    if [[ ! -z $pkg ]]
    then
      pkg_detail=($pkg)
      prgpath=${pkg_detail[0]}
      prgnam=${pkg_detail[1]}
      version=${pkg_detail[2]}
      
      cd $prgpath
      argv0="$0"
      BASH_ARGV0=$prgpath/$prgnam.SlackBuild

      # get package info
      source $prgpath/$prgnam.info
      
      pkgs_toinstall=`echo "$prg $pkgs_toinstall" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`

      # check depedencies from REQUIRES variable from .info file
      if [[ ${REQUIRES+x} ]] && [[ ! -z "$REQUIRES" ]]
      then
        IFS=' '
        read -s requiresDeps <<< "$REQUIRES"
        for dep in "${requiresDeps[@]}"
        do
          check_pkgdeps_sbo $dep
        done
        unset IFS
      fi

      BASH_ARGV0=$argv0
      cd - &> /dev/null
    else
      pkgs_toinstall_invalid=`echo "$prg $pkgs_toinstall_invalid" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
    fi
  done
}

# program to install after check depedencies
pkgs_toremove=""
pkgs_toremove_invalid=""

cleanup_pkgs_toremove_sbo()
{
  # collect depedencies
  installed_deps=""
  removed_deps=""
  clean_deps=""
  pkgs_installed=`cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'`
  for installed in ${pkgs_installed[@]}
  do
    cleanstr=`echo $installed|xargs`
    installed_pkg_detail=`cat $SLAPTBUILD_DB|awk /" $cleanstr "/`
    if [[ ! -z $installed_pkg_detail ]]
    then
      installed_pkg_requires=($installed_pkg_detail)
      installed_pkg_deps=`cat ${installed_pkg_requires[0]}/${installed_pkg_requires[1]}.info|grep -oP 'REQUIRES="\K.*?(?=")'`
      if [[ ! -z $installed_pkg_deps ]]
      then
        for pkg_base in ${pkgs_base_toremove[@]}
        do
          if [[ ! $(echo $pkg_base|xargs) = $cleanstr ]]
          then
            installed_deps=`echo "$installed_pkg_deps $installed_deps" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
          #else
          #  echo $pkg_base
           #removed_deps=`echo "$installed_pkg_deps $removed_deps" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
          fi
        done
      fi
    fi
  done
  
  for pkg_base in ${pkgs_base_toremove[@]}
  do
    cleanstr=`echo $pkg_base|xargs`
    pkg_base_detail=`cat $SLAPTBUILD_DB|awk /" $cleanstr "/`
    if [[ ! -z $pkg_base_detail ]]
    then
      pkg_base_requires=($pkg_base_detail)
      pkg_base_deps=`cat ${pkg_base_requires[0]}/${pkg_base_requires[1]}.info|grep -oP 'REQUIRES="\K.*?(?=")'`
      if [[ ! -z $pkg_base_deps ]]
      then
        for pkg_base in ${pkgs_base_toremove[@]}
        do
          removed_deps=`echo "$pkg_base_deps $removed_deps" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
        done
      fi
    fi
  done
  
  for remd in ${removed_deps[@]}
  do
    found_deps=""
    for insd in ${installed_deps[@]}
    do
      if [[ $(echo $remd|xargs) = $(echo $insd|xargs) ]]
      then
        found_deps="yes"
        break
      fi
    done

    if [[ -z $found_deps ]]
    then
      clean_deps=`echo "$clean_deps $remd" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
    fi
  done

  pkgs_toremove=$clean_deps
}

check_rempkgdeps_sbo()
{
  for prg in ${@}
  do
    pkg=`awk /" $prg "/ < $SLAPTBUILD_DB`
    
    if [[ ! -z $pkg ]]
    then
      pkg_detail=($pkg)
      prgpath=${pkg_detail[0]}
      prgnam=${pkg_detail[1]}
      version=${pkg_detail[2]}
      
      cd $prgpath
      argv0="$0"
      BASH_ARGV0=$prgpath/$prgnam.SlackBuild

      # get package info
      source $prgpath/$prgnam.info
     
      if [[ -z $is_checked_base_pkgs_deps ]]
      then
        for pkg_base in ${pkgs_base_toremove[@]}
        do
          if [[ ! $pkg_base = $prg ]]
          then
            pkgs_toremove=`echo "$prg $pkgs_toremove" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
          else
            pkg_base_deps=""
            pkgs_installed=`cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'`
            for installed in ${pkgs_installed[@]}
            do
              if [[ ! $installed = $pkg_base ]]
              then
                cleanstr=`echo $installed|xargs`
                installed_pkg_detail=`cat $SLAPTBUILD_DB|awk /" $cleanstr "/`
                if [[ ! -z $installed_pkg_detail ]]
                then
                  installed_pkg_requires=($installed_pkg_detail)
                  installed_pkg_deps=`cat ${installed_pkg_requires[0]}/${installed_pkg_requires[1]}.info|grep -oP 'REQUIRES="\K.*?(?=")'`
                  if [[ ! -z $installed_pkg_deps ]]
                  then
                    check_deps=($installed_pkg_deps)
                    for dep in ${check_deps[@]}
                    do
                      if [[ $pkg_base = $dep ]]
                      then
                        pkg_base_deps=`echo "$installed_pkg $pkg_base_deps" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
                      fi
                    done
                  fi
                fi
              fi
            done

            is_checked_base_pkgs_deps="yes"

            if [[ ! -z $pkg_base_deps ]]
            then
              for dep in ${pkg_base_deps[@]}
              do
                check_rempkgdeps_sbo $dep
              done
            fi
          fi
        done
      else
        pkgs_toremove=`echo "$prg $pkgs_toremove" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
      fi

      # check depedencies from REQUIRES variable from .info file
      if [[ ${REQUIRES+x} ]] && [[ ! -z "$REQUIRES" ]]
      then
        IFS=' '
        read -s requiresDeps <<< "$REQUIRES"
        for dep in ${requiresDeps[@]}
        do
          # let check the pkg deps
          check_rempkgdeps_sbo $dep
        done
        unset IFS
      fi

      BASH_ARGV0=$argv0
      cd - &> /dev/null
    else
      pkgs_toremove_invalid=`echo "$prg $pkgs_toremove_invalid" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}'`
    fi
  done
}

upgrade_sbo()
{
  echo "## upgrade installed pkg(s)"
  while IFS= read -r line
  do
    pkg=(${line[0]})
    install_sbo "install" ${pkg[0]}
  done < $SLAPTBUILD_INSTALLED_DB
  echo "## finished."
}

reinstall_all_sbo()
{
  echo "## reinstall installed pkg(s)"
  while IFS= read -r line
  do
    pkg=(${line[0]})
    install_sbo "reinstall" ${pkg[0]}
  done < $SLAPTBUILD_INSTALLED_DB
  echo "## finished."
}

locked_pkg()
{
  echo "## change pkg(s) ${@:2} lock state"
  for pkg in ${@:2}
  do
    pkgnam=`basename $pkg|sed 's/\-[0-9]\+\.[0-9]\+.*$//g'|xargs`
    installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'|grep -e "^${pkgnam}$"|xargs)
    if [[ -z $installed ]]
    then
      continue
    fi

    locktype=""
    if [[ "$1" = "whitelist" ]] || [[ "$1" = "blacklist" ]]
    then
      locktype="$1"
    fi
    
    blacklisted=`cat $SLAPTBUILD_BLACKLIST_DB|grep -e "^${pkgnam}$"|xargs`
    case $locktype in
      whitelist)
        if [[ -n $blacklisted ]]
        then
          echo "$pkgnam whitelisted."
          cat $SLAPTBUILD_BLACKLIST_DB|grep -v -e "^${pkgnam}$"|grep -e "\S" > $SLAPTBUILD_BLACKLIST_DB.tmp
          if [[ -f $SLAPTBUILD_BLACKLIST_DB.tmp ]]
          then
            cp $SLAPTBUILD_BLACKLIST_DB.tmp $SLAPTBUILD_BLACKLIST_DB
          fi
        fi
        ;;
      blacklist)
        if [[ -z $blacklisted ]]
        then
          echo "$pkgnam blacklisted."
          echo $pkgnam >> $SLAPTBUILD_BLACKLIST_DB
        fi
        ;;
    esac
  done
  echo "## finished."
}

blacklisted_pkg()
{
  echo "## finding blacklisted pkg(s) contains: ${@:2}"
  if [[ ! -z $# ]] && [[ $# -lt 2 ]]
  then
    while IFS= read -r line
    do
      echo ">> $line"
    done < $SLAPTBUILD_BLACKLIST_DB
  else
    for pkg in ${@:2}
    do
      while IFS= read -r line
      do
        if [[ "${line,,}" =~ .*"${pkg,,}".* ]]
        then
          echo ">> $line"
        fi
      done < $SLAPTBUILD_BLACKLIST_DB
    done
  fi
  echo "## finished."
}

installed_sbo()
{
  echo "## finding installed pkg(s) contains ${@:2}"
  if [[ ! -z $# ]] && [[ $# -lt 2 ]]
  then
    while IFS= read -r line
    do
      echo ">> $line"
    done < $SLAPTBUILD_INSTALLED_DB
  else
    for pkg in ${@:2}
    do
      while IFS= read -r line
      do
        if [[ "${line,,}" =~ .*"${pkg,,}".* ]]
        then
          echo ">> $line"
        fi
      done < $SLAPTBUILD_INSTALLED_DB
    done
  fi
  echo "## finished."
}

manual ()
{
  echo ""
  echo "## usages"
  echo ""
  echo "slaptbuild [options] [parameters]"
  echo ""
  echo "options:"
  echo "  update        : update git from slaptbuild then rebuild the db, ex: slaptbuild update"
  echo "  search        : search package(s), ex: slaptbuild search zoom-linux xfce4 etc."
  echo "  install       : install package(s), ex: slaptbuild install zoom-linux xfce4 etc."
  echo "  reinstall     : reinstall package(s), ex: slaptbuild reinstall zoom-linux xfce4 etc."
  echo "  reinstall-all : reinstall all package(s), ex: slaptbuild reinstall-all."
  echo "  installpkg    : install package(s) directly .tgz .txz."
  echo "  upgradepkg    : upgrade package(s) directly .tgz .txz."
  echo "  remove        : remove package(s), ex: slaptbuild remove zoom-linux xfce4 etc."
  echo "  info          : show package info, ex: slaptbuild info zoom-linux"
  echo "  installed     : show installed package(s), ex: slaptbuild installed [xfce4 zoom-linux etc]"
  echo "  upgrade       : upgrade installed package, ex: slaptbuild upgrade"
  echo "  blacklist     : blacklist package left it unmodified, ex: slaptbuild blacklist ostree gstreamer"
  echo "  whitelist     : whitelist package allow to modify, ex: slaptbuild whitelist ostree gstreamer"
  echo "  blacklisted   : show backlisted package"
  echo ""
}

case $1 in
  update)
    update_sbo
    ;;
  search)
    search_sbo $@
    ;;
  info)
    info_sbo $2
    ;;
  install)
    install_sbo $@
    ;;
  reinstall)
    install_sbo $@
    ;;
  "reinstall-all")
    reinstall_all_sbo $@
    ;;
  installpkg)
    install_pkg $@
    ;;
  upgradepkg)
    upgrade_pkg $@
    ;;
  installed)
    installed_sbo $@
    ;;
  whitelist|blacklist)
    locked_pkg $@
    ;;
  blacklisted)
    blacklisted_pkg $@
    ;;
  remove)
    remove_sbo $@
    ;;
  upgrade)
    upgrade_sbo $@
    ;;
  *)
    manual
    ;;
esac
