#!/bin/bash
##
## this package is free software and free to use
## slaptbuild application has no official relation with slackbuild.org
## this is just tool for managing slaptbuild tree and run on top of slackbuild tree
## license to GPLV3
##
## bugs report to
## author : amru.rosyada@gmail.com
## git    : https://github.com/zendbit/slaptbuild
##
## contribution are welcome, free to modified
##

# check if run as root
if [[ "$EUID" -ne 0 ]]
  then echo "Please run as root"
  exit
fi

SLACKBUILD_DIR=/usr/slackbuilds
SLAPTBUILD_DIR=/usr/slaptbuild
SLAPTBUILD_DB=$SLAPTBUILD_DIR/slackbuilds.db
SLAPTBUILD_INSTALLED_DB=$SLAPTBUILD_DIR/slackbuilds.installed.db
SLAPTBUILD_BLACKLIST_DB=$SLAPTBUILD_DIR/slackbuilds.blacklist.db
OUTPUT=/tmp
TAG=_SBo
PKGTYPE=tgz

if [[ ! -f $SLAPTBUILD_DB ]]
then
  touch $SLAPTBUILD_DB
fi

if [[ ! -f $SLAPTBUILD_INSTALLED_DB ]]
then
  touch $SLAPTBUILD_INSTALLED_DB
fi

if [[ ! -f $SLAPTBUILD_BLACKLIST_DB ]]
then
  touch $SLAPTBUILD_BLACKLIST_DB
fi

update_sbo()
{
  if [[ ! -d $SLACKBUILD_DIR ]]
  then
    echo "## get current slackbuild tree from git://git.slackbuilds.org/slackbuilds.git..."
    cd /usr
    git clone git://git.slackbuilds.org/slackbuilds.git
    cd - &> /dev/null
    echo "## finished."
  else
    echo "## pulling current slackbuild tree from git://git.slackbuilds.org/slackbuilds.git..."
    cd $SLACKBUILD_DIR
    git pull
    cd - &> /dev/null
    echo "## finished."
  fi

  echo "## generating $SLAPTBUILD_DB..."
  rm -f $SLAPTBUILD_DB

  for catDir in $SLACKBUILD_DIR/*/*/
  do
    pkgDir=${catDir%*/}
    source "$catDir${pkgDir##*/}.info"
    echo "$pkgDir $PRGNAM $VERSION" >> $SLAPTBUILD_DB
  done
  echo "## finished."
}

search_sbo()
{
  echo "## finding package contains ${@:2}..."
  
  for param in ${@:2}
  do
    while IFS=' ' read -ra line
    do
      if [[ "${line,,}" =~ .*"${param,,}".* ]]
      then
        echo ">> ${line[1]} ${line[2]} ${line[0]}"
      fi
    done < $SLAPTBUILD_DB
  done
  echo "## finished."
}

info_sbo()
{
  echo "## get package info of $1..."
  while IFS=' ' read -ra line
  do
    prgpath=${line[0]}
    prgnam=${line[1]}
    if [[ "$prgnam" = "$1" ]]
    then
      cat $prgpath/"slack-desc"
    fi
  done < $SLAPTBUILD_DB
  echo "## finished."
}

remove_sbo()
{
  echo "## removing installed package contains ${@:2}..."
  if [[ $# -ge 2 ]]
  then
    # remove old installed buffer
    rm -f $SLAPTBUILD_INSTALLED_DB.tmp
    for pkg in ${@:2}
    do
      while IFS=' ' read -ra line
      do
        prgnam=${line[0]}
        pkgnam=${line[1]}
        if [[ "$prgnam" = "$pkg" ]]
        then
          echo ">> remove package $pkg..."
          /sbin/removepkg $pkgnam
          if [[ $? -eq 0 ]]
          then
            cat $SLAPTBUILD_INSTALLED_DB|grep -v -w $pkgnam|grep -e "\S" > $SLAPTBUILD_INSTALLED_DB.tmp
          fi
          echo ">> finished."
        fi
      done < $SLAPTBUILD_INSTALLED_DB
    done
  fi

  # udpate installed db
  if [[ -f $SLAPTBUILD_INSTALLED_DB.tmp ]]
  then
    cp $SLAPTBUILD_INSTALLED_DB.tmp $SLAPTBUILD_INSTALLED_DB
  fi

  echo "## finished."
}

install_pkg()
{
  echo "## installing ${@:2}..."
  for pkg in ${@:2}
  do
    if [[ -f $pkg ]]
    then
      installpkg $pkg
      if [[ $? -eq 0 ]]
      then
        pkgnam=`basename $pkg|xargs`
        prgnam=`sed 's/\-[0-9]\+\.[0-9]\+.*$//g' <<< $pkgnam|xargs`
        if [[ $? -eq 0 ]] && [[ -n $prgnam ]] && [[ -n $pkgnam ]]
        then
          echo $prgnam $pkgnam >> $SLAPTBUILD_INSTALLED_DB
        fi
      fi
    fi
  done
  echo "## finished."
}

install_sbo()
{
  echo "## installing ${@:2}..."
  for prg in ${@:2}
  do
    while IFS=' ' read -ra line
    do
      prgpath=${line[0]}
      prgnam=${line[1]}
      version=${line[2]}
      
      if [[ "$prgnam" = "$prg" ]]
      then
        # get package info
        source $prgpath/$prgnam.info

        # if package has same name and version skip it
        installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1" "$2}'|grep -w "$prgnam $prgnam-$version"|xargs)
        if [[ -n $installed ]]
        then
          echo ">> $prgnam $version already installed."
          break
        fi
    
        blacklisted=`cat $SLAPTBUILD_BLACKLIST_DB|grep -e "^${prgnam}$"|xargs`
        if [[ -n $blacklisted ]]
        then
          echo ">> skip, $prgnam blacklisted."
          break
        fi

        # download source for build process
        downloads=""
        if [[ ! "${DOWNLOAD,,}" = "unsupported" ]]
        then
          downloads=$DOWNLOAD
        elif [[ ! "${DOWNLOAD_x86_64,,}" = "unsupported" ]]
        then
          downloads=$DOWNLOAD_x86_64
        elif [[ ! "${DOWNLOAD_i586,,}" = "unsupported" ]]
        then
          downloads=$DOWNLOAD_i586
        elif [[ ! "${DOWNLOAD_i586,,}" = "unsupported" ]]
        then
          downloads=$DOWNLOAD_i686
        fi

        ## remove downloaded source if success
        arr_downloads=( $downloads )
        for download in "${arr_downloads[@]}"
        do
          downloadedfile=$prgpath/${download##*/}
          if [[ -f $downloadedfile ]]
          then
            rm -f $downloadedfile
          fi
        done
        
        wget -P $prgpath -c -t inv $downloads

        # do slackbuild process
        bash $prgpath/$prgnam.SlackBuild
       
        # check if package already generated
        pkgout=`ls $OUTPUT|grep $PRGNAM-$VERSION|grep $TAG|grep $PKGTYPE|xargs`

        # if there are no errors
        if [[ $? -eq 0 ]] && [[ -n $pkgout ]]
        then
          # check if package already installed
          # if so do reinstall or upgrade or downgrade
          installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'|grep -w "$prgnam"|xargs)
          if [[ -n $installed ]]
          then
            remove_sbo "" $prgnam
          fi

          # install package if success
          /sbin/installpkg $OUTPUT/$pkgout

          ## update installed app list
          installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1 $2}'|grep -w "$prgnam $version"|grep -e "\S"|xargs)
          if [[ -z $installed ]]
          then
            echo $PRGNAM $pkgout >> $SLAPTBUILD_INSTALLED_DB
          fi

          ## remove downloaded source if success
          for download in "${arr_downloads[@]}"
          do
            downloadedfile=$prgpath/${download##*/}
            if [[ -f $downloadedfile ]]
            then
              rm -f $downloadedfile
            fi
          done
          
          cd - &> /dev/null
        fi
      fi
    done < $SLAPTBUILD_DB
  done
  echo "## finished."
}

upgrade_sbo()
{
  echo "## upgrade installed package..."
  while IFS= read -ra line
  do
    install_sbo "" ${line[0]}
  done < $SLAPTBUILD_INSTALLED_DB
  echo "## finished."
}

locked_pkg()
{
  echo "## change package ${@:2} lock state..."
  for pkg in ${@:2}
  do
    pkgnam=`basename $pkg|sed 's/\-[0-9]\+\.[0-9]\+.*$//g'|xargs`
    installed=$(cat $SLAPTBUILD_INSTALLED_DB|awk '{print $1}'|grep -e "^${pkgnam}$"|xargs)
    if [[ -z $installed ]]
    then
      continue
    fi

    locktype=""
    if [[ "$1" = "whitelist" ]] || [[ "$1" = "blacklist" ]]
    then
      locktype="$1"
    fi
    
    blacklisted=`cat $SLAPTBUILD_BLACKLIST_DB|grep -e "^${pkgnam}$"|xargs`
    case $locktype in
      whitelist)
        if [[ -n $blacklisted ]]
        then
          echo "$pkgnam whitelisted."
          cat $SLAPTBUILD_BLACKLIST_DB|grep -v -e "^${pkgnam}$"|grep -e "\S" > $SLAPTBUILD_BLACKLIST_DB.tmp
          cp $SLAPTBUILD_BLACKLIST_DB.tmp $SLAPTBUILD_BLACKLIST_DB
        fi
        ;;
      blacklist)
        if [[ -z $blacklisted ]]
        then
          echo "$pkgnam blacklisted."
          echo $pkgnam >> $SLAPTBUILD_BLACKLIST_DB
        fi
        ;;
    esac
  done
  echo "## finished."
}

blacklisted_pkg()
{
  echo "## finding blacklisted package contains ${@:2}..."
  if [[ $# -lt 2 ]]
  then
    while IFS= read -r line
    do
      echo ">> $line"
    done < $SLAPTBUILD_BLACKLIST_DB
  else
    for pkg in ${@:2}
    do
      while IFS= read -r line
      do
        if [[ "${line,,}" =~ .*"${pkg,,}".* ]]
        then
          echo ">> $line"
        fi
      done < $SLAPTBUILD_BLACKLIST_DB
    done
  fi
  echo "## finished."
}

installed_sbo()
{
  echo "## finding installed package contains ${@:2}..."
  if [[ $# -lt 2 ]]
  then
    while IFS= read -r line
    do
      echo ">> $line"
    done < $SLAPTBUILD_INSTALLED_DB
  else
    for pkg in ${@:2}
    do
      while IFS= read -r line
      do
        if [[ "${line,,}" =~ .*"${pkg,,}".* ]]
        then
          echo ">> $line"
        fi
      done < $SLAPTBUILD_INSTALLED_DB
    done
  fi
  echo "## finished."
}

manual ()
{
  echo ""
  echo "## usages"
  echo ""
  echo "slaptbuild [options] [parameters]"
  echo ""
  echo "options:"
  echo "  update      : update git from slaptbuild then rebuild the db, ex: slaptbuild update"
  echo "  search      : search package(s), ex: slaptbuild search zoom-linux xfce4 etc."
  echo "  install     : install package(s), ex: slaptbuild install zoom-linux xfce4 etc."
  echo "  installpkg  : install package(s) directly .tgz .txz."
  echo "  remove      : remove package(s), ex: slaptbuild remove zoom-linux xfce4 etc."
  echo "  info        : show package info, ex: slaptbuild info zoom-linux"
  echo "  installed   : show installed package(s), ex: slaptbuild installed [xfce4 zoom-linux etc]"
  echo "  upgrade     : upgrade installed package, ex: slaptbuild upgrade"
  echo "  blacklist   : blacklist package left it unmodified, ex: slaptbuild blacklist ostree gstreamer"
  echo "  whitelist   : whitelist package allow to modify, ex: slaptbuild whitelist ostree gstreamer"
  echo "  blacklisted : show backlisted package"
  echo ""
}

case $1 in
  update)
    update_sbo
    ;;
  search)
    search_sbo $@
    ;;
  info)
    info_sbo $2
    ;;
  install)
    install_sbo $@
    ;;
  installpkg)
    install_pkg $@
    ;;
  installed)
    installed_sbo $@
    ;;
  whitelist|blacklist)
    locked_pkg $@
    ;;
  blacklisted)
    blacklisted_pkg $@
    ;;
  remove)
    remove_sbo $@
    ;;
  upgrade)
    upgrade_sbo $@
    ;;
  *)
    manual
    ;;
esac
